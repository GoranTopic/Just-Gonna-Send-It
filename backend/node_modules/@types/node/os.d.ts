            const ESPIPE: number;
            const WSAEALREADY: number;
            const ESRCH: number;
            const WSAELOOP: number;
            const WSAEISCONN: number;
            const WSAESTALE: number;
            const EILSEQ: number;
            const WSAEDQUOT: number;
    type NetworkInterfaceInfo = NetworkInterfaceInfoIPv4 | NetworkInterfaceInfoIPv6;
    function release(): string;
            const WSAEREFUSED: number;
            const EBADMSG: number;
            const WSAEPFNOSUPPORT: number;
            const EDOM: number;
            const WSAEPROTOTYPE: number;
            const ENOSR: number;
            const EMFILE: number;
            const WSAEMSGSIZE: number;
        times: {
            const PRIORITY_LOW: number;
    function hostname(): string;
declare module 'os' {
            const WSAECONNREFUSED: number;
            irq: number;
            const ETIME: number;
            const EXDEV: number;
            const WSAENOTCONN: number;
            const ESTALE: number;
            const EBADF: number;
            const EAGAIN: number;
            sys: number;
        gid: number;
            const ENFILE: number;
            const ENXIO: number;
            const WSAENETRESET: number;
            const WSATYPE_NOT_FOUND: number;
     */
     */
     */
     */
    function tmpdir(): string;
    }
    }
    }
    }
    }
    }
            const WSAEINTR: number;
            const ENOTEMPTY: number;
            const ENOENT: number;
            const ENOTSUP: number;
     * @param priority Must be in range of -20 to 19
     * @param priority Must be in range of -20 to 19
}
            const EMLINK: number;
    function userInfo(options?: { encoding: BufferEncoding }): UserInfo<string>;
        scopeid: number;
            const WSAEMFILE: number;
            const EINTR: number;
        namespace errno {
     * uname(3). On Windows, `pRtlGetVersion` is used, and if it is not available,
            const WSA_E_NO_MORE: number;
            const EDESTADDRREQ: number;
    function homedir(): string;
            const ENOLINK: number;
        model: string;
            const ENAMETOOLONG: number;
            const EIO: number;
        address: string;
            const EFAULT: number;
    function type(): string;
            const EBUSY: number;
            const E2BIG: number;
            const EIDRM: number;
            const EHOSTUNREACH: number;
    namespace constants {
    function setPriority(pid: number, priority: number): void;
            const ENOMSG: number;
    interface NetworkInterfaceInfoIPv6 extends NetworkInterfaceBase {
            const WSAENOPROTOOPT: number;
    function arch(): string;
            const ENODATA: number;
     * Defaults to current process.
            const WSAETIMEDOUT: number;
            const PRIORITY_ABOVE_NORMAL: number;
        cidr: string | null;
            const WSAEADDRNOTAVAIL: number;
            const WSAENOMORE: number;
            const EFBIG: number;
            const EINVAL: number;
            const WSASERVICE_NOT_FOUND: number;
            const ENODEV: number;
            const WSAEBADF: number;
            const ENOEXEC: number;
     * Sets the priority of the current process.
            user: number;
            const WSAESOCKTNOSUPPORT: number;
        username: T;
            const WSAEDESTADDRREQ: number;
            const WSAEDISCON: number;
            const ETXTBSY: number;
            const ENETRESET: number;
    function userInfo(options: { encoding: 'buffer' }): UserInfo<Buffer>;
    interface UserInfo<T> {
    function endianness(): "BE" | "LE";
        }
        }
    function setPriority(priority: number): void;
    };
            const WSAENETDOWN: number;
            const WSA_E_CANCELLED: number;
    interface NetworkInterfaceInfoIPv4 extends NetworkInterfaceBase {
            const WSAENOTSOCK: number;
            const WSAEOPNOTSUPP: number;
            const ELOOP: number;
            const WSAECANCELLED: number;
            const WSAECONNABORTED: number;
            const PRIORITY_HIGH: number;
            const ECONNABORTED: number;
    function cpus(): CpuInfo[];
            const EISDIR: number;
            const WSAEFAULT: number;
        namespace signals {}
            const WSAEADDRINUSE: number;
            const EAFNOSUPPORT: number;
            const EINPROGRESS: number;
        internal: boolean;
    function platform(): NodeJS.Platform;
            const EACCES: number;
            const ENOSPC: number;
            const WSAEACCES: number;
            const WSAENOBUFS: number;
    function uptime(): number;
        homedir: T;
    function freemem(): number;
            const EOVERFLOW: number;
            const EWOULDBLOCK: number;
        [key in NodeJS.Signals]: number;
            const ENOTCONN: number;
            const EPROTO: number;
            const EROFS: number;
            const ENOSTR: number;
            const WSANOTINITIALISED: number;
    function totalmem(): number;
            const EOPNOTSUPP: number;
            const WSAEINVALIDPROCTABLE: number;
     * On POSIX systems, the operating system release is determined by calling
            nice: number;
            const WSAEPROCLIM: number;
            const WSAEUSERS: number;
            const WSAVERNOTSUPPORTED: number;
            const WSAECONNRESET: number;
            const WSAEINPROGRESS: number;
            const EEXIST: number;
            const WSAEPROVIDERFAILEDINIT: number;
    function getPriority(pid?: number): number;
            const ENETDOWN: number;
            const ENOTTY: number;
            const EMSGSIZE: number;
     * Returns a string identifying the kernel version.
            const EPROTOTYPE: number;
            const WSAEPROTONOSUPPORT: number;
            const WSAENETUNREACH: number;
            const WSAEINVALIDPROVIDER: number;
        netmask: string;
            const ENOBUFS: number;
        family: "IPv4";
            const WSAEAFNOSUPPORT: number;
    interface CpuInfo {
            const WSAEWOULDBLOCK: number;
            const EPROTONOSUPPORT: number;
            const ENOMEM: number;
            const WSASYSCALLFAILURE: number;
            const ENOTDIR: number;
        uid: number;
            const PRIORITY_HIGHEST: number;
        const signals: SignalConstants;
        speed: number;
            const WSAETOOMANYREFS: number;
            const WSAEREMOTE: number;
    interface NetworkInterfaceBase {
     * https://en.wikipedia.org/wiki/Uname#Examples for more information.
            const WSAESHUTDOWN: number;
            const WSAEHOSTUNREACH: number;
            const ENETUNREACH: number;
            const WSAENOTEMPTY: number;
            const EALREADY: number;
        mac: string;
            const ENOPROTOOPT: number;
            const EPIPE: number;
            const WSASYSNOTREADY: number;
            const EADDRINUSE: number;
            const ECANCELED: number;
        namespace priority {
    function loadavg(): number[];
    /**
    /**
    /**
    /**
            const EDQUOT: number;
            const ECHILD: number;
            const ECONNREFUSED: number;
            const ENOSYS: number;
            const EPERM: number;
        const UV_UDP_REUSEADDR: number;
            const WSAEINVAL: number;
            const EDEADLK: number;
            const PRIORITY_BELOW_NORMAL: number;
        };









            const PRIORITY_NORMAL: number;
            idle: number;
     * Gets the priority of a process.
            const ETIMEDOUT: number;
        family: "IPv6";
            const ERANGE: number;
            const EADDRNOTAVAIL: number;
     * `GetVersionExW()` will be used. See
     * Sets the priority of the process specified process.
            const EMULTIHOP: number;
    type SignalConstants = {
    const EOL: string;
    function version(): string;
            const WSAENAMETOOLONG: number;
            const ENOLCK: number;
            const EISCONN: number;
            const ECONNRESET: number;
            const WSAEHOSTDOWN: number;
    function networkInterfaces(): NodeJS.Dict<NetworkInterfaceInfo[]>;
        shell: T;
            const ENOTSOCK: number;
